# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class FlavorGPU(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flavor_openstack_id=None, flavor_name=None, available=None, total=None):  # noqa: E501
        """FlavorGPU - a model defined in OpenAPI

        :param flavor_openstack_id: The flavor_openstack_id of this FlavorGPU.  # noqa: E501
        :type flavor_openstack_id: str
        :param flavor_name: The flavor_name of this FlavorGPU.  # noqa: E501
        :type flavor_name: str
        :param available: The available of this FlavorGPU.  # noqa: E501
        :type available: float
        :param total: The total of this FlavorGPU.  # noqa: E501
        :type total: float
        """
        self.openapi_types = {
            'flavor_openstack_id': str,
            'flavor_name': str,
            'available': float,
            'total': float
        }

        self.attribute_map = {
            'flavor_openstack_id': 'flavor_openstack_id',
            'flavor_name': 'flavor_name',
            'available': 'available',
            'total': 'total'
        }

        self._flavor_openstack_id = flavor_openstack_id
        self._flavor_name = flavor_name
        self._available = available
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'FlavorGPU':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FlavorGPU of this FlavorGPU.  # noqa: E501
        :rtype: FlavorGPU
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flavor_openstack_id(self):
        """Gets the flavor_openstack_id of this FlavorGPU.


        :return: The flavor_openstack_id of this FlavorGPU.
        :rtype: str
        """
        return self._flavor_openstack_id

    @flavor_openstack_id.setter
    def flavor_openstack_id(self, flavor_openstack_id):
        """Sets the flavor_openstack_id of this FlavorGPU.


        :param flavor_openstack_id: The flavor_openstack_id of this FlavorGPU.
        :type flavor_openstack_id: str
        """

        self._flavor_openstack_id = flavor_openstack_id

    @property
    def flavor_name(self):
        """Gets the flavor_name of this FlavorGPU.


        :return: The flavor_name of this FlavorGPU.
        :rtype: str
        """
        return self._flavor_name

    @flavor_name.setter
    def flavor_name(self, flavor_name):
        """Sets the flavor_name of this FlavorGPU.


        :param flavor_name: The flavor_name of this FlavorGPU.
        :type flavor_name: str
        """

        self._flavor_name = flavor_name

    @property
    def available(self):
        """Gets the available of this FlavorGPU.


        :return: The available of this FlavorGPU.
        :rtype: float
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this FlavorGPU.


        :param available: The available of this FlavorGPU.
        :type available: float
        """

        self._available = available

    @property
    def total(self):
        """Gets the total of this FlavorGPU.


        :return: The total of this FlavorGPU.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this FlavorGPU.


        :param total: The total of this FlavorGPU.
        :type total: float
        """

        self._total = total
